stages:
  - stage: GitVersion_Stage
    displayName: Use GitVersion
    jobs:
      - job: GitVersion_v5_Job
        displayName: GitVersion v5
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: 0

          - task: gitversion/setup@0.13.0
            displayName: Install GitVersion
            inputs:
              versionSpec: '5.x'
              includePrerelease: false

          - task: gitversion/execute@0.13.0
            name: version_step # step id used as reference for output values
            displayName: Use GitVersion
            inputs:
              useConfigFile: true
              configFilePath: 'GitVersion_v5.yml'
              additionalArguments: '/overrideconfig update-build-number=false'

  - stage: GitVersion_without_prefix
    condition: and(succeeded(), eq(dependencies.GitVersion_Stage.outputs['GitVersion_v5_Job.version_step.branchName'], 'main')) # use in condition
    dependsOn:
      - GitVersion_Stage
    displayName: Use Output from previous stage
    jobs:
      - job: Use_GitVersion_v5_without_prefix
        displayName: Use Output from previous stage (without prefix)
        variables:
          myvar_major: $[ stageDependencies.GitVersion_Stage.GitVersion_v5_Job.outputs['version_step.major'] ] # set in variables
          myvar_minor: $[ stageDependencies.GitVersion_Stage.GitVersion_v5_Job.outputs['version_step.minor'] ]
          myvar_patch: $[ stageDependencies.GitVersion_Stage.GitVersion_v5_Job.outputs['version_step.patch'] ]
          myvar_semVer: $[ stageDependencies.GitVersion_Stage.GitVersion_v5_Job.outputs['version_step.semVer'] ]
          myvar_fullSemVer: $[ stageDependencies.GitVersion_Stage.GitVersion_v5_Job.outputs['version_step.fullSemVer'] ]
        pool:
          vmImage: 'windows-latest'
        steps:
          - pwsh: |
              echo "Major      (myvar_major)               : $(myvar_major)"
              echo "Minor      (myvar_minor)               : $(myvar_minor)"
              echo "Patch      (myvar_patch)               : $(myvar_patch)"
              echo "SemVer     (myvar_semVer)              : $(myvar_semVer)"
              echo "FullSemVer (myvar_fullSemVer)          : $(myvar_fullSemVer)"
            displayName: Use mapped job variables (pwsh - outputs without prefix)
          - pwsh: |
              echo "Major      (env:localvar_major)        : $env:localvar_major"
              echo "Minor      (env:localvar_minor)        : $env:localvar_minor"
              echo "Patch      (env:localvar_patch)        : $env:localvar_patch"
              echo "SemVer     (env:localvar_semVer)       : $env:localvar_semVer"
              echo "FullSemVer (env:localvar_fullSemVer)   : $env:localvar_fullSemVer"
            displayName: Use mapped local env from job variables (pwsh - outputs without prefix)
            env:
              localvar_major: $(myvar_major)
              localvar_minor: $(myvar_minor)
              localvar_patch: $(myvar_patch)
              localvar_semVer: $(myvar_semVer)
              localvar_fullSemVer: $(myvar_fullSemVer)
          - bash: |
              echo "Major      (myvar_major)        : $(myvar_major)"
              echo "Minor      (myvar_minor)        : $(myvar_minor)"
              echo "Patch      (myvar_patch)        : $(myvar_patch)"
              echo "SemVer     (myvar_semVer)       : $(myvar_semVer)"
              echo "FullSemVer (myvar_fullSemVer)   : $(myvar_fullSemVer)"
            displayName: Use mapped job variables (bash - outputs without prefix)
          - bash: |
              echo "Major      (localvar_major)        : $localvar_major"
              echo "Minor      (localvar_minor)        : $localvar_minor"
              echo "Patch      (localvar_patch)        : $localvar_patch"
              echo "SemVer     (localvar_semVer)       : $localvar_semVer"
              echo "FullSemVer (localvar_fullSemVer)   : $localvar_fullSemVer"
            displayName: Use mapped local env from job variables (bash - outputs without prefix)
            env:
              localvar_major: $(myvar_major)
              localvar_minor: $(myvar_minor)
              localvar_patch: $(myvar_patch)
              localvar_semVer: $(myvar_semVer)
              localvar_fullSemVer: $(myvar_fullSemVer)

  - stage: GitVersion_with_prefix
    condition: and(succeeded(), eq(dependencies.GitVersion_Stage.outputs['GitVersion_v5_Job.version_step.GitVersion_BranchName'], 'main')) # use in condition
    dependsOn:
      - GitVersion_Stage
    displayName: Use Output from previous stage (with prefix)
    jobs:
      - job: Use_GitVersion_v5_with_prefix
        displayName: Use Output from previous stage (with prefix)
        variables:
          myvar_GitVersion_Major: $[ stageDependencies.GitVersion_Stage.GitVersion_v5_Job.outputs['version_step.GitVersion_Major'] ] # set in variables
          myvar_GitVersion_Minor: $[ stageDependencies.GitVersion_Stage.GitVersion_v5_Job.outputs['version_step.GitVersion_Minor'] ]
          myvar_GitVersion_Patch: $[ stageDependencies.GitVersion_Stage.GitVersion_v5_Job.outputs['version_step.GitVersion_Patch'] ]
          myvar_GitVersion_SemVer: $[ stageDependencies.GitVersion_Stage.GitVersion_v5_Job.outputs['version_step.GitVersion_SemVer'] ]
          myvar_GitVersion_FullSemVer: $[ stageDependencies.GitVersion_Stage.GitVersion_v5_Job.outputs['version_step.GitVersion_FullSemVer'] ]
        pool:
          vmImage: 'windows-latest'
        steps:
          - pwsh: |
              echo "Major      (myvar_GitVersion_Major)               : $(myvar_GitVersion_Major)"
              echo "Minor      (myvar_GitVersion_Minor)               : $(myvar_GitVersion_Minor)"
              echo "Patch      (myvar_GitVersion_Patch)               : $(myvar_GitVersion_Patch)"
              echo "SemVer     (myvar_GitVersion_SemVer)              : $(myvar_GitVersion_SemVer)"
              echo "FullSemVer (myvar_GitVersion_FullSemVer)          : $(myvar_GitVersion_FullSemVer)"
            displayName: Use mapped job variables (pwsh - outputs with prefix)
          - pwsh: |
              echo "Major      (env:localvar_GitVersion_Major)        : $env:localvar_GitVersion_Major"
              echo "Minor      (env:localvar_GitVersion_Minor)        : $env:localvar_GitVersion_Minor"
              echo "Patch      (env:localvar_GitVersion_Patch)        : $env:localvar_GitVersion_Patch"
              echo "SemVer     (env:localvar_GitVersion_SemVer)       : $env:localvar_GitVersion_SemVer"
              echo "FullSemVer (env:localvar_GitVersion_FullSemVer)   : $env:localvar_GitVersion_FullSemVer"
            displayName: Use mapped local env from job variables (pwsh - outputs with prefix)
            env:
              localvar_GitVersion_Major: $(myvar_GitVersion_Major)
              localvar_GitVersion_Minor: $(myvar_GitVersion_Minor)
              localvar_GitVersion_Patch: $(myvar_GitVersion_Patch)
              localvar_GitVersion_SemVer: $(myvar_GitVersion_SemVer)
              localvar_GitVersion_FullSemVer: $(myvar_GitVersion_FullSemVer)
          - bash: |
              echo "Major      (myvar_GitVersion_Major)        : $(myvar_GitVersion_Major)"
              echo "Minor      (myvar_GitVersion_Minor)        : $(myvar_GitVersion_Minor)"
              echo "Patch      (myvar_GitVersion_Patch)        : $(myvar_GitVersion_Patch)"
              echo "SemVer     (myvar_GitVersion_SemVer)       : $(myvar_GitVersion_SemVer)"
              echo "FullSemVer (myvar_GitVersion_FullSemVer)   : $(myvar_GitVersion_FullSemVer)"
            displayName: Use mapped job variables (bash - outputs with prefix)
          - bash: |
              echo "Major      (localvar_GitVersion_Major)        : $localvar_GitVersion_Major"
              echo "Minor      (localvar_GitVersion_Minor)        : $localvar_GitVersion_Minor"
              echo "Patch      (localvar_GitVersion_Patch)        : $localvar_GitVersion_Patch"
              echo "SemVer     (localvar_GitVersion_SemVer)       : $localvar_GitVersion_SemVer"
              echo "FullSemVer (localvar_GitVersion_FullSemVer)   : $localvar_GitVersion_FullSemVer"
            displayName: Use mapped local env from job variables (bash - outputs with prefix)
            env:
              localvar_GitVersion_Major: $(myvar_GitVersion_Major)
              localvar_GitVersion_Minor: $(myvar_GitVersion_Minor)
              localvar_GitVersion_Patch: $(myvar_GitVersion_Patch)
              localvar_GitVersion_SemVer: $(myvar_GitVersion_SemVer)
              localvar_GitVersion_FullSemVer: $(myvar_GitVersion_FullSemVer)